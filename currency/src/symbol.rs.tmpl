
//
// WARNING - this file is autogenerated from `symbol.rs.tmpl` - WARNING
//

use std::str::FromStr;

/// Symbol of a currency or crypto currency
#[derive(Serialize, Deserialize, Eq, PartialEq, Debug, Copy, Clone, Hash)]
pub enum Symbol {
    /// Euro
    EUR,
    /// United States Dollar
    USD,{{range $k, $v := .}}
    /// {{$v.Name}}
    {{$v.Symbol}},{{end}}
}

impl FromStr for Symbol {
    type Err = String;

    fn from_str(s: &str) -> Result<Symbol, Self::Err> {
        match s {
            "EUR" => Ok(Symbol::EUR),
            "USD" => Ok(Symbol::USD),{{range $k, $v := .}}
            "{{$v.Symbol}}" => Ok(Symbol::{{$v.Symbol}}),{{end}}
            _ => Err(format!("invalid currency symbol: {}", s)),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn from_str() {
        assert_eq!(Symbol::from_str("BTC").unwrap(), Symbol::BTC);
        assert_eq!(Symbol::from_str("USD").unwrap(), Symbol::USD);
    }
}
